// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Constants
static const float PI = 3.14159265f;

// Output parameters
RWTexture2D<float4> Position;
RWTexture2D<float4> Direction;
RWTexture2D<float4> Color;
RWTexture2D<int> isComplete;

// Input textures
Texture2D<float4> _SkyboxTexture;

// Step size parameters
float timeStep;

// Samplers
SamplerState sampler_SkyboxTexture;

void SimpleShoot(float tStep, inout float3 x, inout float3 u)
{
    for(int i = 0; i < 3; i++)
    {
        x[i] += u[i] * tStep;
    }
}

// Blend transparency and background colors
float4 Blend(float4 foreColor, float4 backColor)
{
    // Blend using previous color's alpha
    //float4 outColor = foreColor + backColor * (1.0 - foreColor.w);
    float4 outColor = foreColor + backColor;
    return outColor;
}

float3 SampleBackground(float4 x, float3 x_0)
{
    float dist = sqrt(((x[1] - x_0[0]) * (x[1] - x_0[0])) + ((x[2] - x_0[1]) * (x[2] - x_0[1])) + ((x[3] - x_0[2]) * (x[3] - x_0[2])));
    float theta = (acos((x[2] - x_0[1]) / dist)) / -PI;
    float phi = atan2((x[1] - x_0[0]), -(x[3] - x_0[2])) / PI * 0.5f;
    float3 skyAlpha = _SkyboxTexture.SampleLevel(sampler_SkyboxTexture, float2(phi, theta), 0).xyz;
    return skyAlpha;
}

float Pow7(float input)
{
    return input * input * input * input * input * input * input;
}

float Pow2(float input)
{
    return input * input;
}

float Pow3(float input)
{
    return input * input * input;
}

void FlatChristoffel(float x, float y, float z, inout float4x4 Christoffel[4]){
    
    float4x4 c0 = {
        {0.0, 0.0, 0.0, 0.0},
        {0.0, 0.0, 0.0, 0.0},
        {0.0, 0.0, 0.0, 0.0},
        {0.0, 0.0, 0.0, 0.0}
    };
    
    float4x4 c1 = {
        {0.0, 0.0, 0.0, 0.0},
        {0.0, 0.0, 0.0, 0.0},
        {0.0, 0.0, 0.0, 0.0},
        {0.0, 0.0, 0.0, 0.0}
    };

    float4x4 c2 = {

        {0.0, 0.0, 0.0, 0.0},
        {0.0, 0.0, 0.0, 0.0},
        {0.0, 0.0, 0.0, 0.0},
        {0.0, 0.0, 0.0, 0.0}
    };

    float4x4 c3 = {
        {0.0, 0.0, 0.0, 0.0},
        {0.0, 0.0, 0.0, 0.0},
        {0.0, 0.0, 0.0, 0.0},
        {0.0, 0.0, 0.0, 0.0}
    };

    [unroll]
    for(int a = 0; a < 4; a++){
        for(int b = 0; b < 4; b++){
            Christoffel[0][a][b] = c0[a][b];
            Christoffel[1][a][b] = c1[a][b];
            Christoffel[2][a][b] = c2[a][b];
            Christoffel[3][a][b] = c3[a][b];
        }
    }
}


    void ShootChristoffel(inout float dt, inout float4 x, inout float4 u)
{ //this function shoots rays in the direction they originate from until they reach a certain distance (int count is incremented to maximum amount)

    float k[8];

    float u_star[8];

    float u_euler[8];

    float error;

    float tol = 0.5f;

    float u_trial[8];

    float dt_min = 1e-10;

    float4x4 Christoffel[4];
    
        FlatChristoffel(x[1], x[2], x[3], Christoffel);
  
        [unroll]
        for(int a = 0; a < 4; a++){
            k[a] = -u[a];
            k[a + 4] = 0.0;
       
            for(int b = 0; b < 4; b++){
            
                for(int c = 0; c < 4; c++){
                    k[a + 4] += (Christoffel[a])[b][c] * u[b] * u[c];
                }
            }
        }
            
     
        

        [unroll]
        for(int i = 0; i < 4; i++){
            u_star[i] = x[i] + (0.5)*dt*k[i];
            u_euler[i] = x[i] + dt*k[i];
        }

        [unroll]
        for(int i = 4; i < 8; i++){
            u_star[i] = u[i - 4] + (0.5)*dt*k[i];
            u_euler[i] = u[i - 4] + dt*k[i];
        }

        FlatChristoffel(u_star[1], u_star[2], u_star[3], Christoffel);
  
        [unroll]
        for(int a = 0; a < 4; a++){
            k[a] = -u_star[a+4];
            k[a + 4] = 0.0;
   
            for(int b = 0; b < 4; b++){
    
                for(int c = 0; c < 4; c++){
                    k[a + 4] += (Christoffel[a])[b][c] * u_star[b + 4] * u_star[c + 4];
                }
            }
        }
        
        [unroll]
        for(int i = 0; i < 4; i++){
            u_trial[i] = x[i] + dt*k[i];
        }
        [unroll]
        for(int i = 4; i < 8; i++){
            u_trial[i] = u[i-4] + dt*k[i];
        }

        error = 0.0;
        [unroll]
        for(int i = 1; i < 4; i++){
            error += abs(u_trial[i] - u_euler[i]);
        }

        
        if(error < tol || dt <= dt_min){
            [unroll]
            for(int i = 0; i < 4; i++){
                x[i] = u_trial[i];
            }
            for(int i = 4; i < 8; i++){
                u[i-4] = u_trial[i];
            }
            if(4*error < tol){
                dt = dt * 2;
            }
        }
        else{
            dt = 0.5f * dt;
        }
       
    
}



[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // Break if already failed bounds check
    if (isComplete[id.xy] == 1) { return; }
    float4 x = Position[id.xy].xyzw;
    float t = Position[id.xy].x;
    float3 camPos = x.yzw;
    float4 u = Direction[id.xy].xyzw;
    float dt = 0.1;

    ShootChristoffel(dt, x, u);

    // Write back position and direction
    t += dt;
    Position[id.xy]  = x;
    Direction[id.xy] = u;

    float dist = sqrt((x[1]*x[1]) + (x[2]*x[2]) + (x[3]*x[3]));

    if(abs(dist) < 0.5)
    {
        // Blend black with previous color
        Color[id.xy] = Blend(Color[id.xy], float4(0.0, 0.0, 0.0, 1.0));

        // Set complete flag
        isComplete[id.xy] = 1;
    }
    
    if(abs(dist) > 100.0)
    {
        float4 skyboxColor = float4(SampleBackground(x, camPos), 1.0);
        // Blend with previous color value
        Color[id.xy] = Blend(Color[id.xy], skyboxColor);

        // Set complete flag
        isComplete[id.xy] = 1;
    }


}
