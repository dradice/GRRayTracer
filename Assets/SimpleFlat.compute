// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Constants
static const float PI = 3.14159265f;

// Output parameters
RWTexture2D<float4> Position;
RWTexture2D<float4> Direction;
RWTexture2D<float4> Color;
RWTexture2D<int> isComplete;

// Input textures
TextureCube<float4> _SkyboxTexture;

// Step size parameters
float timeStep;
float poleMargin;
float poleStep;
bool hardCheck;

// Physical parameters
float escapeDistance;
float horizonRadius;
float time;

// Samplers
SamplerState sampler_SkyboxTexture;

float SquareRoot(float n, float initialGuess)
{
    float x = initialGuess;

    float root;

    int count = 0;

    float tol = 0.01f;

    while(1)
    {
        count++;

        root = 0.5f * (x + (n / x));

        if(abs(root - x) < tol)
        {
            break;
        }
        x = root;
    }

    return root;
}

float Pow7(float input)
{
    return input * input * input * input * input * input * input;
}

float Pow2(float input)
{
    return input * input;
}

float Pow3(float input)
{
    return input * input * input;
}

void flatChristoffel(float x, float y, float z, inout float4x4 Christoffel[4]){
    

    float rho = SquareRoot(((x * x) + (y * y) + (z * z)), (x + y + z));
    float rhoSquared = rho * rho;
    float rhoSquareMinus = (rhoSquared - horizonRadius * horizonRadius);
    float rhoMinus2 = (rho - horizonRadius);
    float rhoPlus2 = (rho + horizonRadius);

    float4x4 c0 = {
        // {0, 2 * x * horizonRadius / (rho * rhoSquareMinus), 2 * y * horizonRadius / (rho * rhoSquareMinus),  2 * z * horizonRadius / (rho *  rhoSquareMinus)},
        // {2 * x * horizonRadius / (rho * rhoSquareMinus), 0, 0, 0},
        // {2 * y * horizonRadius / (rho * rhoSquareMinus), 0, 0, 0},
        // {2 * z * horizonRadius / (rho * rhoSquareMinus), 0, 0, 0}
        {0.0, 0.0, 0.0, 0.0},
                {0.0, 0.0, 0.0, 0.0},
                {0.0, 0.0, 0.0, 0.0},
                {0.0, 0.0, 0.0, 0.0}
    };
    
    float4x4 c1 = {
        // { 2 * x * Pow3(rho) * (rhoMinus2) * horizonRadius / (Pow3(rhoPlus2)), 0, 0, 0},
        // { 0, -2 * x * horizonRadius / (rhoSquared * rhoPlus2), -2 * y * horizonRadius / (rhoSquared * rhoPlus2), -2 * z * horizonRadius / (rhoSquared * rhoPlus2)},
        // { 0,  -2 * y * horizonRadius / (rhoSquared * rhoPlus2) / (rho * rho * rho * (rhoPlus2)), 2 * x * horizonRadius / (rhoSquared * rhoPlus2), 0},
        // { 0, -2 * z * horizonRadius / (rhoSquared * rhoPlus2), 0, 2 * x * horizonRadius / (rhoSquared * rhoPlus2)}
        {0.0, 0.0, 0.0, 0.0},
                {0.0, 0.0, 0.0, 0.0},
                {0.0, 0.0, 0.0, 0.0},
                {0.0, 0.0, 0.0, 0.0}
    };

    float4x4 c2 = {
        // {2 * y * Pow2(rho) * (rhoMinus2) * horizonRadius / ((rhoPlus2)), 0, 0, 0},
        // {0, 2 * y * horizonRadius / (rhoSquared * rhoPlus2), -2 * x * horizonRadius / (rhoSquared * rhoPlus2), 0},
        // {0, -2 * x * horizonRadius / (rhoSquared * rhoPlus2), -2 * y * horizonRadius / (rhoSquared * rhoPlus2), - 2 * z * horizonRadius / (rhoSquared * rhoPlus2)},
        // {0, 0,  -2 * z * horizonRadius / (rhoSquared * rhoPlus2), 2 * y * horizonRadius / (rhoSquared * rhoPlus2)}
        {0.0, 0.0, 0.0, 0.0},
                {0.0, 0.0, 0.0, 0.0},
                {0.0, 0.0, 0.0, 0.0},
                {0.0, 0.0, 0.0, 0.0}
    };

    float4x4 c3 = {
        // {2 * z * Pow2(rho) * (rhoMinus2) * horizonRadius / (Pow7(rhoPlus2)), 0, 0, 0},
        // {0, 2 * z * horizonRadius / (rhoSquared * rhoPlus2), 0, -2 * x * horizonRadius / (rhoSquared * rhoPlus2)},
        // {0, 0, 2 * z * horizonRadius / (rhoSquared * rhoPlus2), -2 * y * horizonRadius / (rhoSquared * rhoPlus2)},
        // {0,  -2 * x * horizonRadius / (rhoSquared * rhoPlus2),  -2 * y * horizonRadius / (rhoSquared * rhoPlus2), -2 * z * horizonRadius / (rhoSquared * rhoPlus2)}
        {0.0, 0.0, 0.0, 0.0},
                {0.0, 0.0, 0.0, 0.0},
                {0.0, 0.0, 0.0, 0.0},
                {0.0, 0.0, 0.0, 0.0}
    };

    // Christoffel[0] = c0;
    // Christoffel[1] = c1;
    // Christoffel[2] = c2;
    // Christoffel[3] = c3;
    [unroll]
    for(int a = 0; a < 4; a++){
        for(int b = 0; b < 4; b++){
            Christoffel[0][a][b] = c0[a][b];
            Christoffel[1][a][b] = c1[a][b];
            Christoffel[2][a][b] = c2[a][b];
            Christoffel[3][a][b] = c3[a][b];
        }
    }
    

    // Christoffel = {
    //     {
    //             {0.0, 0.0, 0.0, 0.0},
    //             {0.0, 0.0, 0.0, 0.0},
    //             {0.0, 0.0, 0.0, 0.0},
    //             {0.0, 0.0, 0.0, 0.0}
    //     },
              
    //     {
    //             {0.0, 0.0, 0.0, 0.0},
    //             {0.0, 0.0, 0.0, 0.0},
    //             {0.0, 0.0, 0.0, 0.0},
    //             {0.0, 0.0, 0.0, 0.0}
    //     },
               
    //     {
    //             {0.0, 0.0, 0.0, 0.0},
    //             {0.0, 0.0, 0.0, 0.0},
    //             {0.0, 0.0, 0.0, 0.0},
    //             {0.0, 0.0, 0.0, 0.0}
    //     },

    //     {
    //             {0.0, 0.0, 0.0, 0.0},
    //             {0.0, 0.0, 0.0, 0.0},
    //             {0.0, 0.0, 0.0, 0.0},
    //             {0.0, 0.0, 0.0, 0.0}
    //     }
    // };

    // Christoffel[][0][0] =
    // {{0.0, 0.0, 0.0, 0.0}};

    // Christoffel[0] = 
    //     {
                // {0, 2 * x * horizonRadius / (rho * rhoSquareMinus), 2 * y * horizonRadius / (rho * rhoSquareMinus),  2 * z * horizonRadius / (rho *  rhoSquareMinus)},
                // {2 * x * horizonRadius / (rho * rhoSquareMinus), 0, 0, 0},
                // {2 * y * horizonRadius / (rho * rhoSquareMinus), 0, 0, 0},
                // {2 * z * horizonRadius / (rho * rhoSquareMinus), 0, 0, 0}
        //         {0.0, 0.0, 0.0, 0.0},
        //         {0.0, 0.0, 0.0, 0.0},
        //         {0.0, 0.0, 0.0, 0.0},
        //         {0.0, 0.0, 0.0, 0.0}
        // };
    // Christoffel[1] = 
    //     {
                // { 2 * x * Pow3(rho) * (rhoMinus2) * horizonRadius / (Pow3(rhoPlus2)), 0, 0, 0},
                // { 0, -2 * x * horizonRadius / (rhoSquared * rhoPlus2), -2 * y * horizonRadius / (rhoSquared * rhoPlus2), -2 * z * horizonRadius / (rhoSquared * rhoPlus2)},
                // { 0,  -2 * y * horizonRadius / (rhoSquared * rhoPlus2) / (rho * rho * rho * (rhoPlus2)), 2 * x * horizonRadius / (rhoSquared * rhoPlus2), 0},
                // { 0, -2 * z * horizonRadius / (rhoSquared * rhoPlus2), 0, 2 * x * horizonRadius / (rhoSquared * rhoPlus2)}
        //         {0.0, 0.0, 0.0, 0.0},
        //         {0.0, 0.0, 0.0, 0.0},
        //         {0.0, 0.0, 0.0, 0.0},
        //         {0.0, 0.0, 0.0, 0.0}
        // };

    // Christoffel[2] = 
    //     {
                // {2 * y * Pow2(rho) * (rhoMinus2) * horizonRadius / ((rhoPlus2)), 0, 0, 0},
                // {0, 2 * y * horizonRadius / (rhoSquared * rhoPlus2), -2 * x * horizonRadius / (rhoSquared * rhoPlus2), 0},
                // {0, -2 * x * horizonRadius / (rhoSquared * rhoPlus2), -2 * y * horizonRadius / (rhoSquared * rhoPlus2), - 2 * z * horizonRadius / (rhoSquared * rhoPlus2)},
                // {0, 0,  -2 * z * horizonRadius / (rhoSquared * rhoPlus2), 2 * y * horizonRadius / (rhoSquared * rhoPlus2)}
                // {0.0, 0.0, 0.0, 0.0},
                // {0.0, 0.0, 0.0, 0.0},
                // {0.0, 0.0, 0.0, 0.0},
                // {0.0, 0.0, 0.0, 0.0}
        // };

    // Christoffel[3] = 
    //     {
                // {2 * z * Pow2(rho) * (rhoMinus2) * horizonRadius / (Pow7(rhoPlus2)), 0, 0, 0},
                // {0, 2 * z * horizonRadius / (rhoSquared * rhoPlus2), 0, -2 * x * horizonRadius / (rhoSquared * rhoPlus2)},
                // {0, 0, 2 * z * horizonRadius / (rhoSquared * rhoPlus2), -2 * y * horizonRadius / (rhoSquared * rhoPlus2)},
                // {0,  -2 * x * horizonRadius / (rhoSquared * rhoPlus2),  -2 * y * horizonRadius / (rhoSquared * rhoPlus2), -2 * z * horizonRadius / (rhoSquared * rhoPlus2)}
        //         {0.0, 0.0, 0.0, 0.0},
        //         {0.0, 0.0, 0.0, 0.0},
        //         {0.0, 0.0, 0.0, 0.0},
        //         {0.0, 0.0, 0.0, 0.0}
        // };


    }


void ShootRay(inout float4 x, inout float4 u)
{ //this function shoots rays in the direction they originate from until they reach a certain distance (int count is incremented to maximum amount)

    float k[8];

    float u_star[8];

    float u_euler[8];

    float time = 0.0;

    float dt = 1e-6f;

    float error;

    float tol = 0.5f;

    float u_trial[8];

    float dt_min = 1e-10;

    float4x4 Christoffel[4];

    float count = 0.0;
    
        flatChristoffel(x[1], x[2], x[3], Christoffel);
  
        [unroll]
        for(int a = 0; a < 4; a++){
            k[a] = -u[a];
            k[a + 4] = 0.0;
       
            for(int b = 0; b < 4; b++){
            
                for(int c = 0; c < 4; c++){
                    k[a + 4] += (Christoffel[a])[b][c] * u[b] * u[c];
                }
            }
        }
            
     
        

        [unroll]
        for(int i = 0; i < 4; i++){
            u_star[i] = x[i] + (0.5)*dt*k[i];
            u_euler[i] = x[i] + dt*k[i];
        }

        [unroll]
        for(int i = 4; i < 8; i++){
            u_star[i] = u[i - 4] + (0.5)*dt*k[i];
            u_euler[i] = u[i - 4] + dt*k[i];
        }

        flatChristoffel(u_star[1], u_star[2], u_star[3], Christoffel);
  
        [unroll]
        for(int a = 0; a < 4; a++){
            k[a] = -u_star[a+4];
            k[a + 4] = 0.0;
   
            for(int b = 0; b < 4; b++){
    
                for(int c = 0; c < 4; c++){
                    k[a + 4] += (Christoffel[a])[b][c] * u_star[b + 4] * u_star[c + 4];
                }
            }
        }
        
        [unroll]
        for(int i = 0; i < 4; i++){
            u_trial[i] = x[i] + dt*k[i];
        }
        [unroll]
        for(int i = 4; i < 8; i++){
            u_trial[i] = u[i-4] + dt*k[i];
        }

        error = 0.0;
        [unroll]
        for(int i = 1; i < 4; i++){
            error += abs(u_trial[i] - u_euler[i]);
        }

        if(error < tol || dt <= dt_min){
            time += dt;
            [unroll]
            for(int i = 0; i < 4; i++){
                x[i] = u_trial[i];
            }
            for(int i = 4; i < 8; i++){
                u[i-4] = u_trial[i];
            }
            if(4*error < tol){
                dt = dt * 2;
            }
        }
        else{
            dt = 0.5f * dt;
        }
       
    
}

float3 SampleBackground(float4 x_0, float4 x)
{
    float deltaU[4];
    
    [unroll]
    for(int i = 0; i < 4; i++){
        deltaU[i] = x[i] - x_0[i];
    }

    float distance = sqrt((deltaU[1] * deltaU[1]) + (deltaU[2] * deltaU[2])  + (deltaU[3] * deltaU[3]));
    float theta = acos(deltaU[2] / distance) / -PI;
    float phi = atan2(deltaU[1], -deltaU[3]) / -PI * 0.5f;

       
    return _SkyboxTexture.SampleLevel(sampler_SkyboxTexture, float2(phi, theta), 0).xyz;
}

void SimpleShoot(inout float4 x, inout float4 u)
{

}

float3 SampleSimple(float4 x_0, float4 x)
{

}

// Check if geodesic inevitably crosses horizon
bool HorizonCheck(float3 x, float3 u)
{
    // Check if inside of photon sphere
    if (abs(x.x) < 1.5 * horizonRadius) {
        return true;
    }

    // Break here if not doing thorough checking
    if (!hardCheck) {
        return false;
    }

    // Check if stuck near poles
    if (x.y < poleMargin * PI || (x.y > (1.0 - poleMargin) * PI))
    {
        return true;
    }

    // Check if stuck in orbit
    if (abs(x.x) < 2.0 * horizonRadius) {

        // Pre-calculate factors
        float r = x.x;
        float rs = horizonRadius;
        float th = x.y;
        float sth = sin(th);
        float A = 1.0 - (rs / r);
        float a = sqrt(A);

        // Calculate motion constants
        float E = sqrt((A * u.x * u.x) + (u.y * u.y / (r * r)) + (u.z * u.z / (r * r * sth * sth))) / a;
        float C = u.z * u.z / (E * E);

        // Check if geodesic originates inside of horizon
        if (C > (27.0 / 4.0) * rs * rs) {
            return true;
        }
        else {
            return (x.x * u.x < 0.0);
        }
    }

    // Otherwise, keep going
    return false;
}

[numthreads(8, 8, 1)] void CSMain(uint3 id: SV_DispatchThreadID) {
  void CSMain (uint3 id : SV_DispatchThreadID)
{
    // Break if already failed bounds check
    if (isComplete[id.xy] == 1) { return; }

    // Propagate ray
    float4 x =  (0.0, Position[id.xy].y, Position[id.xy].z, Position[id.xy].w);
    float4 u = (1.0, Direction[id.xy].y, Direction[id.xy].z, Direction[id.xy].w); //For this, we will have to write a function that gets the correct initial redshift (instead of 1.0).

    float4 x_0 = x;

    ShootRay(x, u);

    // Check for horizon condition
    if (HorizonCheck(x, u))
    {
        // Blend black with previous color
        Color[id.xy] = Blend(Color[id.xy], float4(0.0, 0.0, 0.0, 1.0));

        // Set complete flag
        isComplete[id.xy] = 1;
    }

    // Check for escape condition
    if (abs(x[1]) > escapeDistance * horizonRadius)
    {
        // Evaluate skybox texture
        float3 skyboxColor = SampleBackground(x_0, x);

    // Blend with previous color value
        Color[id.xy] = Blend(Color[id.xy], skyboxColor);

        // Set complete flag
        isComplete[id.xy] = 1;
    }

    

  // Trace and shade
 // float3 result = float3(0, 0, 0);
  //for (int i = 0; i < 8; i++) {

   // result = SampleBackground(ray); //takes the final position of each ray and passes it to the sample background function
   // if (!any(ray.energy))
     // break;
  //}
 // Result[id.xy] = float4(result, 1);
}
