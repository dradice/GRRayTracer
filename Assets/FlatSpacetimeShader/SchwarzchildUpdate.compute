// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Constants
static const float PI = 3.14159265f;

// Output parameters
RWTexture2D<float4> Position;
RWTexture2D<float4> Direction;
RWTexture2D<float4> Color;
RWTexture2D<int> isComplete;
RWTexture2D<float> TimeStep;
RWTexture2D<float> ErrorTolerance;

// Input textures
Texture2D<float4> _SkyboxTexture;

// Step size parameters
//float timeStep;

// Samplers
SamplerState sampler_SkyboxTexture;

// Physical parameters 
float horizonRadius;
float diskRadius;

// Blend transparency and background colors
float4 Blend(float4 foreColor, float4 backColor)
{
    // Blend using previous color's alpha
    //float4 outColor = foreColor + backColor * (1.0 - foreColor.w);
    float4 outColor = foreColor + backColor;
    return outColor;
}

float3 SampleBackground(float4 x, float3 x_0)
{
    float dist = sqrt(((x[1] - x_0[0]) * (x[1] - x_0[0])) + ((x[2] - x_0[1]) * (x[2] - x_0[1])) + ((x[3] - x_0[2]) * (x[3] - x_0[2])));
    float theta = (acos((x[2] - x_0[1]) / dist)) / -PI;
    float phi = atan2((x[1] - x_0[0]), -(x[3] - x_0[2])) / PI * 0.5f;
    float3 skyAlpha = _SkyboxTexture.SampleLevel(sampler_SkyboxTexture, float2(phi, theta), 0).xyz;
    return skyAlpha;
}

float Pow7(float input)
{
    return input * input * input * input * input * input * input;
}

float Pow2(float input)
{
    return input * input;
}

float Pow3(float input)
{
    return input * input * input;
}

    void SchwarzchildChristoffel(float x, float y, float z, inout float4x4 Christoffel[4]){

    float rho = sqrt((x * x) + (y * y) + (z * z));
    float rho_s = horizonRadius;
    
    float a = (rho - rho_s);
    float b = Pow7(rho + rho_s);
    float c = Pow3(rho);
    float d = 1 + (rho_s / rho);
    float e = (1 - Pow2(rho_s / rho));

    float g_xtt = (2 * c * rho_s * a * x) / (b);
    float g_ytt = (2 * c * rho_s * a * y) / (b);
    float g_ztt = (2 * c * rho_s * a * z) / (b);

    float g_ttx = (2 * rho_s * x) / (c * e);
    float g_tty = (2 * rho_s * y) / (c * e);
    float g_ttz = (2 * rho_s * z) / (c * e);

    float g_xxx = -(2 * rho_s * x) / (c * d);
    float g_yxy = g_xxx;
    float g_zxz = g_xxx;
    float g_xyy = -g_xxx;
    float g_xzz = -g_xxx;

    float g_yxx = (2 * rho_s * y) / (c * d);
    float g_xxy = -g_yxx;
    float g_yyy = -g_yxx;
    float g_zyz = -g_yxx;
    float g_yzz = g_yxx;

    float g_zxx = (2 * rho_s * z) / (c * d);
    float g_xxz = -g_zxx;
    float g_zyy = g_zxx;
    float g_yyz = -g_zxx;
    float g_zzz = -g_zxx;

    float4x4 c0 =
    {
        {0, g_ttx, g_tty, g_ttz},
        {g_ttx, 0, 0, 0},
        {g_tty, 0, 0, 0},
        {g_ttz, 0, 0, 0}
    };

    float4x4 c1 =
    {
        {g_xtt, 0, 0, 0},
        {0, g_xxx, g_xxy, g_xxz},
        {0, g_xxy, g_xyy, 0},
        {0, g_xxz, 0, g_xzz}
    };

    float4x4 c2 = 
    {
        {g_ytt, 0, 0, 0},
        {0, g_yxx, g_yxy, 0},
        {0, g_yxy, g_yyy, g_yyz},
        {0, 0, g_yyz, g_yzz}
    };

    float4x4 c3 = 
    {
        {g_ztt, 0, 0, 0},
        {0, g_zxx, 0, g_zxz},
        {0, 0, g_zyy, g_zyz},
        {0, g_zxz, g_zyz, g_zzz}
    };


    [unroll]
    for(int a = 0; a < 4; a++){
        for(int b = 0; b < 4; b++){
            Christoffel[0][a][b] = c0[a][b];
            Christoffel[1][a][b] = c1[a][b];
            Christoffel[2][a][b] = c2[a][b];
            Christoffel[3][a][b] = c3[a][b];
        }
    }
}

    void NullCondition(inout float u[8])
    {
        float rho_s = horizonRadius;

        float g_tt = -(1 - (sqrt( (u[1] * u[1]) + (u[2] * u[2]) +(u[3] * u[3]) ) / (rho_s)));
        float g_xx = 1/(1 - (1 - (sqrt( (u[1] * u[1]) + (u[2] * u[2]) +(u[3] * u[3]) ) / (rho_s))));
        float g_yy = sqrt((u[1] * u[1]) + (u[2] * u[2]) +(u[3] * u[3]));
        float g_zz = (u[2] * u[2] * u[3] * u[3]) / (u[1] * u[1]);

        float u_t = sqrt(-((g_xx * Pow2(u[5])) + (g_yy * Pow2(u[6])) + (g_zz * Pow2(u[7]))) / g_tt);
        u[4] = u_t;
    }

    bool ShootRay(inout float dt, float tol, inout float4 x, inout float4 u)
{ //this function shoots rays in the direction they originate from until they reach a certain distance (int count is incremented to maximum amount)

    float k[8];

    float u_star[8];

    float u_euler[8];

    float error;

    float u_trial[8];

    // float xu[8] =
    // {
    //     x[0], x[1], x[2], x[3], u[0], u[1], u[2], u[3],
    // };

    // u[0] = NullCondition(xu);

    float dt_min = 1e-10;

    float4x4 Christoffel[4];

    bool isGood = false;


        SchwarzchildChristoffel(x[1], x[2], x[3], Christoffel);
        
        
  
    
        [unroll]
        for(int a = 0; a < 4; a++){
            k[a] = -u[a];
            k[a + 4] = 0.0;
       
            for(int b = 0; b < 4; b++){
            
                for(int c = 0; c < 4; c++){
                    k[a + 4] += (Christoffel[a])[b][c] * u[b] * u[c];
                }
            }
        }
            
     
        

        [unroll]
        for(int i = 0; i < 4; i++){
            u_star[i] = x[i] + (0.5)*dt*k[i];
            u_euler[i] = x[i] + dt*k[i];
        }

        [unroll]
        for(int i = 4; i < 8; i++){
            u_star[i] = u[i - 4] + (0.5)*dt*k[i];
            u_euler[i] = u[i - 4] + dt*k[i];
        }

        SchwarzchildChristoffel(u_star[1], u_star[2], u_star[3], Christoffel);
  
        [unroll]
        for(int a = 0; a < 4; a++){
            k[a] = -u_star[a+4];
            k[a + 4] = 0.0;
   
            for(int b = 0; b < 4; b++){
    
                for(int c = 0; c < 4; c++){
                    k[a + 4] += (Christoffel[a])[b][c] * u_star[b + 4] * u_star[c + 4];
                }
            }
        }
        
        [unroll]
        for(int i = 0; i < 4; i++){
            u_trial[i] = x[i] + dt*k[i];
        }
        [unroll]
        for(int i = 4; i < 8; i++){
            u_trial[i] = u[i-4] + dt*k[i];

        }

        error = 0.0;
        [unroll]
        for(int i = 1; i < 4; i++){
            error += abs(u_trial[i] - u_euler[i]);
        }

        if(error < tol || dt <= dt_min){
            isGood = true;
            [unroll]
            for(int i = 0; i < 4; i++){
                x[i] = u_trial[i];
            }
            
            //NullCondition(u_trial);
            for(int i = 4; i < 8; i++){
                
                u[i-4] = u_trial[i];
            
            }
            
            
            if(4*error < tol){
                dt = dt * 2.0;
            }
        }
        else if(error > tol)
        {

            dt *= 0.5;
            //dt = max(dt, 1e-3);
        } 
        return isGood;  
    
    
}

bool diskHit(float4 x, float dist)
{
    float thickness = 0.01;
    if(abs(x[2]) < thickness && dist < diskRadius && dist > horizonRadius)
    {
        return true;
    }
    else
    {
        return false;
    }
}

float Fract(float n)
{
    int nInt = (int)n;
    return n - abs(nInt);
}

float Random(float2 xz) 
{
    return Fract(sin(dot(xz, (12.9898,78.233))) * 43758.5453123);
}

float DiskNoise(float4 x)
{
    float rad = sqrt((x[1] * x[1]) + (x[3] * x[3]));
    // float intensity = sin((PI * rad) / diskRadius);
    // return Random((x[1], x[3])) * intensity;
    return abs(sin(PI * rad / diskRadius)* (0.01 + sin((PI * rad * 7.0) / diskRadius)));
    
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // Break if already failed bounds check
    if (isComplete[id.xy] == 1) { return; }
    float4 x = Position[id.xy].xyzw;
    float t = Position[id.xy].x;
    float3 camPos = x.yzw;
    float4 u = Direction[id.xy].xyzw;
    float dt = TimeStep[id.xy].x;
    float tol = ErrorTolerance[id.xy].x;

    bool isGood = ShootRay(dt, tol, x, u);   

    // Write back position and direction
    TimeStep[id.xy] = dt;
    if(isGood)
    {
        t += dt;
        Position[id.xy]  = x;
        Direction[id.xy] = u;

    }

    float dist = sqrt((x[1]*x[1]) + (x[2]*x[2]) + (x[3]*x[3]));

    // bool hitDisk = diskHit(x, dist);

    // float noise = DiskNoise(x);

    // if(hitDisk)
    // {
    //     Color[id.xy] = Blend(Color[id.xy], noise * float4(0.08, 0.04, 0.01, 1.0));
       
    // }
    // if((u.x > 1.0))
    // {
    //     // Blend black with previous color
    //     Color[id.xy] = Blend(Color[id.xy], float4(0.0, 0.0, 1.0, 0.0));

    //     // Set complete flag
    //     isComplete[id.xy] = 1;
    // }

    if((dist < horizonRadius))
    {
        // Blend black with previous color
        Color[id.xy] = Blend(Color[id.xy], float4(1.0, 0.0, 0.0, 0.0));

        // Set complete flag
        isComplete[id.xy] = 1;
    }

    if(dist > 1000.0)
    {
        float4 skyboxColor = float4(SampleBackground(x, camPos), 1.0);
        // Blend with previous color value
        Color[id.xy] = Blend(Color[id.xy], skyboxColor);

        // Set complete flag
        isComplete[id.xy] = 1;
    }
    


}
