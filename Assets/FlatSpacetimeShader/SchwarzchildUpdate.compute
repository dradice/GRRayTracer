// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
#pragma shader_feature STEREO_CUBEMAP_RENDER

// Constants
static const float PI = 3.14159265f;

// Output parameters
RWTexture2D<float4> Position;
RWTexture2D<float4> Direction;
RWTexture2D<float4> Color;
RWTexture2D<int> isComplete;
RWTexture2D<float> TimeStep;
RWTexture2D<float> ErrorTolerance;

// Input textures
Texture2D<float4> _SkyboxTexture;

// Step size parameters
//float timeStep;

// Samplers
SamplerState sampler_SkyboxTexture;

// Physical parameters 
float horizonRadius;
float diskRadius;

//Light ray data
float4 derivatives = (0.0, 0.0, 0.0, 0.0);

// Blend transparency and background colors
float4 Blend(float4 foreColor, float4 backColor)
{
    // Blend using previous color's alpha
    //float4 outColor = foreColor + backColor * (1.0 - foreColor.w);
    float4 outColor = foreColor + backColor;
    return outColor;
}

float3 SampleBackground(float4 x, float3 x_0)
{
    float dist = sqrt(((x[1] - x_0[0]) * (x[1] - x_0[0])) + ((x[2] - x_0[1]) * (x[2] - x_0[1])) + ((x[3] - x_0[2]) * (x[3] - x_0[2])));
    float theta = (acos((x[2] - x_0[1]) / dist)) / -PI;
    float phi = atan2((x[1] - x_0[0]), -(x[3] - x_0[2])) / PI * 0.5f;
    float3 skyAlpha = _SkyboxTexture.SampleLevel(sampler_SkyboxTexture, float2(phi, theta), 0).xyz;
    return skyAlpha;
}

float Pow7(float input)
{
    return input * input * input * input * input * input * input;
}

float Pow2(float input)
{
    return input * input;
}

float Pow3(float input)
{
    return input * input * input;
}

float Pow4(float input)
{
    return input * input * input * input;
}
    // void NullCondition(inout float u[8])
    // {
    //     // float rho_s = horizonRadius;
    //     // float rho = sqrt((u[1] * u[1]) + (u[2] * u[2]) + (u[3] * u[3]));
        
    //     // float g_tt = -(1 - rho_s / rho);
    //     // float g_xx = Pow4((1 + rho_s / rho));
    //     // float g_yy = g_xx;
    //     // float g_zz = g_xx; 

    //     // float u_t = sqrt(-((g_xx * Pow2(u[5])) + (g_yy * Pow2(u[6])) + (g_zz * Pow2(u[7]))) / g_tt);
    //     // u[4] = u_t;

    //     float4 x;
        
    //     [unroll]
    //     for(int i = 0; i < 4; i++)
    //     {
    //         x[i] = u[i];
    //     }

    //     [unroll]
    //     for(int i = 0; i < 3; i++)
    //     {
    //         u[4] += Metric(x) * u[i];
    //     }


    // }

    float4x4 Metric(float4 x)
    {
        float rho_s = horizonRadius;
        float rho = sqrt((x[1] * x[1]) + (x[2] * x[2]) + (x[3] * x[3]));
        //rho = max(rho, 1e-6);
        
        float g_tt = -Pow2((1 - rho_s / rho) / (1 + rho_s / rho));
        g_tt = min(g_tt, -1e-12);
        float g_xx = Pow4((1 + rho_s / rho));
        float g_yy = g_xx;
        float g_zz = g_xx; 

        float4x4 g = 
        {
            {g_tt, 0, 0, 0},
            {0, g_xx, 0, 0},
            {0, 0, g_yy, 0},
            {0, 0, 0, g_zz}
        };

        return g;
    
    }

    float4x4 InverseMetric(float4 x)
    {
        float rho_s = horizonRadius;
        float rho = sqrt((x[1] * x[1]) + (x[2] * x[2]) + (x[3] * x[3]));
        //rho = max(rho, 1e-6);
        
        float g_tt = -Pow2((1 - rho_s / rho) / (1 + rho_s / rho));
        g_tt = min(g_tt, -1e-12);
        float g_xx = Pow4((1 + rho_s / rho));
        float g_yy = g_xx;
        float g_zz = g_xx; 

        float4x4 g = 
        {
            {1.0 / g_tt, 0, 0, 0},
            {0, 1.0 / g_xx, 0, 0},
            {0, 0, 1.0 / g_yy, 0},
            {0, 0, 0, 1.0 / g_zz}
        };

        return g;
    
    }
    
    void Derivative(float4 x, int a, inout float4x4 dg)
    {
        float h = 0.001;

        float4 deltaPlus_x = (x[0], x[1], x[2], x[3]);
        deltaPlus_x[a] += h;
        float4x4 gPlus = Metric(deltaPlus_x);
        
        float4 deltaMinus_x = (x[0], x[1], x[2], x[3]);
        deltaMinus_x[a] -= h;
        float4x4 gMinus = Metric(deltaMinus_x);

        
        [unroll]
        for(int b = 0; b < 4; b++)
        {
            [unroll]
            for(int c = 0; c < 4; c++)
            {
                dg[b][c] = (gPlus[b][c] - gMinus[b][c]) / (2.0 * h);
            
            }
        }
        
        
    }

    bool ShootRay(inout float dt, float tol, inout float4 x_u, inout float4 u_u)
    { 
    float4 rhs_x_u;
    float4 rhs_u_u;
    float4 rhs_u_d;

    float4 x_u_star;
    float4 u_d_star;
    float4 u_u_star;

    float4 x_u_euler;
    float4 u_d_euler;
    float4 u_u_euler;

    float4 u_d;

    float4x4 g_dd = Metric(x_u);

    float4x4 dg_dd = 
        {
            {0.0, 0.0, 0.0, 0.0},
            {0.0, 0.0, 0.0, 0.0},
            {0.0, 0.0, 0.0, 0.0},
            {0.0, 0.0, 0.0, 0.0}
        };

    bool isGood = false;

    float error;

    float epsilon = 1e-6;

    //float dt_star = dt*max(epsilon, dist*(1.0 - (horizonRadius / dist)));
    // TO-DO: get rid of dt_star
    float dt_star = dt;

    float dt_min = 1e-9;

    [unroll]
    for(int a = 0; a < 4; a++)
    {
        u_d[a] = 0.0;
        [unroll]
        for(int b = 0; b < 4; b++)
        {
            u_d[a] += g_dd[a][b] * u_u[b];
        }
    }

    [unroll]
    for(int a = 0; a < 4; a++)
    {
        rhs_x_u[a] = -u_u[a];
        
        rhs_u_d[a] = 0.0;    

        Derivative(x_u, a, dg_dd); 

        [unroll]
        for(int b = 0; b < 4; b++)
        {
            [unroll]
            for(int c = 0; c < 4; c++)
            {
                rhs_u_d[a] -= ((0.5) * dg_dd[b][c] * u_u[b] * u_u[c]);
            }
        }
    }

    [unroll]
    for(int a = 0; a < 4; a++)
    {
        x_u_star[a] = x_u[a] + (0.5)*dt_star*rhs_x_u[a];
        u_d_star[a] = u_d[a] + (0.5)*dt_star*rhs_u_d[a];
    }

    float4x4 g_uu = InverseMetric(x_u_star);

    [unroll]
    for(int a = 0; a < 4; a++)
    {
        u_u_star[a] = 0.0;
        
        [unroll]
        for(int b = 0; b < 4; b++)
        {
            u_u_star[a] += g_uu[a][b] * u_d_star[b];
        }
    }

    [unroll]
    for(int a = 0; a < 4; a++)
    {
        x_u_euler[a] = x_u[a] + dt_star*rhs_x_u[a];
        u_d_euler[a] = u_d[a] + dt_star*rhs_u_d[a];
    }

    [unroll]
    for(int a = 0; a < 4; a++)
    {
        rhs_x_u[a] = -u_u_star[a];
        rhs_u_d[a] = 0.0;
        
         Derivative(x_u_star, a, dg_dd); 
        [unroll]
        for(int b = 0; b < 4; b++)
        {
            [unroll]
            for(int c = 0; c < 4; c++)
            {
                rhs_u_d[a] -= (0.5) * (dg_dd[b][c] * u_u_star[b] * u_u_star[c]);
            }
        }
    }

    [unroll]
    for(int a = 0; a < 4; a++)
    {
        x_u_star[a] = x_u[a] + dt_star*rhs_x_u[a];
        u_d_star[a] = u_d[a] + dt_star*rhs_u_d[a];
    }

    float dist = (x_u[1] * x_u[1]) + (x_u[2] * x_u[2]) + (x_u[3] * x_u[3]);
    error = 0.0;
    [unroll]
    for(int i = 1; i < 4; i++)
    {
        error += (x_u_star[i] - x_u_euler[i]) * (x_u_star[i] - x_u_euler[i]);
    }

    if(error < tol * tol * dist || dt <= dt_min)
    {
        isGood = true;
        [unroll]
        for(int i = 0; i < 4; i++){
            x_u[i] = x_u_star[i];
        }

        g_uu = InverseMetric(x_u);

        [unroll]
        for(int a = 0; a < 4; a++){ 
            u_d[a] = u_d_star[a];
        }

        [unroll]
        for(int a = 0; a < 4; a++)
        {
            u_u[a] = 0.0;

            [unroll]
            for(int b = 0; b < 4; b++)
            {
                u_u[a] += g_uu[a][b] * u_d[a];
            }
        }
        
        if(16 * error < tol * tol * dist)
        {
            dt *= 2.0;
        }
    }

    else if(error > tol)
    {
        dt *= 0.5;
    } 
    return isGood;        
}

bool diskHit(float4 x, float dist)
{
    float thickness = 0.01;
    if(abs(x[2]) < thickness && dist < diskRadius && dist > horizonRadius)
    //if(abs(x[2]) < thickness && dist < diskRadius && dist > 0.0)
    {
        return true;
    }
    else
    {
        return false;
    }
}

float Fract(float n)
{
    int nInt = (int)n;
    return n - abs(nInt);
}

float Random(float2 xz) 
{
    return Fract(sin(dot(xz, (12.9898,78.233))) * 43758.5453123);
}

float DiskNoise(float4 x)
{
    float rad = sqrt((x[1] * x[1]) + (x[3] * x[3]));
    // float intensity = sin((PI * rad) / diskRadius);
    // return Random((x[1], x[3])) * intensity;
    return abs(sin(PI * rad / diskRadius)* (0.01 + sin((PI * rad * 7.0) / diskRadius)));
    
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    
    // Break if already failed bounds check
    if (isComplete[id.xy] == 1) { return; }
    float4 x = Position[id.xy].xyzw;
    float3 camPos = x.yzw;
    float4 u = Direction[id.xy].xyzw;
    float dt = TimeStep[id.xy].x;
    float tol = ErrorTolerance[id.xy].x;

    float dist = 1e10; 
    // float dist = sqrt((x[1]*x[1]) + (x[2]*x[2]) + (x[3]*x[3]));

    bool isGood = ShootRay(dt, tol, x, u);   
    // Write back position and direction
    TimeStep[id.xy] = dt;
    if(isGood)
    {
        Position[id.xy]  = x;
        Direction[id.xy] = u;
        dist = sqrt((x[1]*x[1]) + (x[2]*x[2]) + (x[3]*x[3]));
    }
    else
    {
        return;
    }

    bool hitDisk = diskHit(x, dist);

    float noise = DiskNoise(x);

    
    //TO DO: Compute proper redshift

    if((dist <= horizonRadius))
    {
        // Blend black with previous color
        Color[id.xy] = Blend(Color[id.xy], float4(0.0, 0.0, 0.0, 0.0));

        // Set complete flag
        isComplete[id.xy] = 1;
    }

    // if( ( -0.001 < ((x[3]*x[3]) / 1.0) - ((x[2]*x[2]) / 1.0) - ((x[1]*x[1]) / 1.0) < 0.01) )
    // {
    //     Color[id.xy] = Blend(Color[id.xy], float4(0.2, 0.0, 0.5, 0.0));
    //     //isComplete[id.xy] = 1;
    // }

    if(hitDisk)
    {
        Color[id.xy] = Blend(Color[id.xy], float4(0.9, 0.08, 0.0, 1.0));
        isComplete[id.xy] = 1;
    } 

    if(dist > 10000.0)
    {
        float4 skyboxColor = float4(SampleBackground(x, camPos), 1.0);
        // Blend with previous color value
        Color[id.xy] = Blend(Color[id.xy], skyboxColor);

        // Set complete flag
        isComplete[id.xy] = 1;
    }
    


}
